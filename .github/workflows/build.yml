name: CI
on: [push, pull_request]

jobs:

  build-and-test-ubuntu:
    #if: false  # Temporarily disable
    name: Build And Test Ubuntu
    runs-on: ubuntu-latest
    env:
      CI_BUILD: 1
      IMAGE: ubuntu
      IMAGE_TAG: latest
    steps:
      - uses: actions/checkout@main
      # Note only alpine needs "preinstall" step
      - name: Update packages
        run: sudo -E bash .github/update-packages.sh
      - name: Install dependencies
        run: |
          sudo -E bash .github/install.sh
          sudo -E bash .github/install-post.sh
      - name: Build and run tests
        run: bash .github/build.sh

      # Trigger testing of more linux flavors
      - name: Trigger linux flavors build
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: build-linux-flavors

  build-and-test-windows:
    #if: false  # Temporarily disable
    name: Build And Test Windows ${{ matrix.os-version }} ${{ matrix.architecture.cmakename }} ${{ matrix.crypto }}
    runs-on: windows-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [2019, 2022]
        crypto: [OpenSSL, BCrypt]
        architecture:
        - {
            cmakename: win32,
            triplet: x86-windows
          }
        - {
            cmakename: x64,
            triplet: x64-windows
          }
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@main

      - uses: lukka/get-cmake@latest

      # Setup MSVC command prompt environment vars.
      # We must do this before setting up our local vcpkg,
      # Because it will set VCPKG_ROOT to point to some global
      # install of vcpkg, and we don't want that
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Restore artifacts, setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: e809a42f87565e803b2178a0c11263f462d1800a
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: vcpkg.json
          runVcpkgInstall: false

      - name: vcpkg check / install dependencies
        working-directory: '${{ github.workspace }}'
        run: '"${{env.VCPKG_ROOT}}\\vcpkg" install --triplet=${{matrix.architecture.triplet}}'
        shell: cmd

      - name: Install dependencies and generate project files
        run: |
          mkdir build
          cd build
          cmake -S .. -A${{matrix.architecture.cmakename}} -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DBUILD_TOOLS=ON -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake -DUSE_CRYPTO=${{matrix.crypto}} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG="${{github.workspace}}/build/bin"
        shell: cmd

      # Mark all directories as safe so checkouts performed in CMakeLists.txt don't cause "unsafe repository" errors.
      # See https://github.com/actions/checkout/issues/766
      - name: Configure Git
        run: git config --global --add safe.directory '*'
        shell: cmd

      - name: Build projects
        working-directory: '${{ github.workspace }}/build'
        run: cmake --build . --config debug
        shell: cmd

      - name: Test crypto
        working-directory: '${{ github.workspace }}/build/bin'
        run: test_crypto.exe
        shell: cmd

      - name: Test connection
        working-directory: '${{ github.workspace }}/build/bin'
        #run: test_connection.exe suite-quick  # Loopback throughput test not performing on github hosted runners for some reason
        run: test_connection.exe identity quick lane_quick_queueanddrain lane_quick_priority_and_background
        shell: cmd

